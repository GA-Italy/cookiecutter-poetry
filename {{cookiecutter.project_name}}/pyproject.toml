[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
repository = "https://github.com/{{cookiecutter.author_github_handle}}/{{cookiecutter.project_name}}"
{% if cookiecutter.mkdocs == 'y' -%}
documentation = "https://{{cookiecutter.author_github_handle}}.github.io/{{cookiecutter.project_name}}/"
{% endif -%}
readme = "README.md"
packages = [
  {include = "{{cookiecutter.project_slug}}"}
]

[tool.poetry.dependencies]
python = ">=3.9,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "~7.4.4"
pytest_mock = "~3.12.0"
{% if cookiecutter.codecov == 'y' -%}
pytest-cov = "~4.1.0"
{% endif -%}
mypy = "~1.8.0"
pre-commit = "~3.6.0"
tox = "~4.8.0"
ruff = "~0.4.2"
black = "~23.12.1"

{% if cookiecutter.mkdocs == 'y' -%}
[tool.poetry.group.docs.dependencies]
mkdocs = "~1.5.3"
mkdocs-material = "~9.5.11"
mkdocstrings = {extras = ["python"], version = "~0.24.0"}
mkdocs-gen-files = "~0.5.0"
mkdocs-literate-nav = "~0.6.1"
mkdocs-section-index = "~0.3.8"
docformatter = "~1.7.5"
{%- endif %}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

{% if cookiecutter.mkdocs == 'y' -%}
[tool.docformatter]
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
black = true
newlinestyle = "google"
make-summary-multi-line= true
pre-summary-newline=true
{%- endif %}

[tool.mypy]
files = ["{{cookiecutter.project_slug}}"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.ruff]
target-version = "py{{ cookiecutter.target_python_version.replace('.', '') }}"
line-length = 88
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    #"E501",
    # DoNotAssignLambda
    "E731",
    # Unspecified Import Names
    "F403",
    # long messages
    "TRY003",
    # Possible SQL injection vector through string-based query construction
    "S608",
    # Zip without explicit strict
    "B905"
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
]

[tool.black]
line-length = 88
target-version = ['py{{ cookiecutter.target_python_version.replace('.', '') }}']
preview = true

{% if cookiecutter.codecov == "y"-%}
[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.project_slug}}"]
{% endif%}
